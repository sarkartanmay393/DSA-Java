package Leetcode75;

import java.util.Arrays;

// 643
// https://leetcode.com/problems/max-number-of-k-sum-pairs/description/

public class MaxAverageSubarray {
  public static void main(String[] args) {
    int k = 8;
    int[] nums = { 544, 943, 727, 493, 995, 459, 769, 236, 646, 733, 208, 874, 491, 288, 78, 756, 880, 610, 24, 967, 3,
        890, 720, 51, 948, 125, 429, 978, 408, 468, 923, 56, 722, 758, 424, 951, 558, 999, 74, 482, 247, 955, 108, 661,
        551, 156, 962, 9, 261, 630, 638, 548, 513, 159, 501, 856, 881, 21, 783, 72, 731, 616, 592, 433, 651, 534, 621,
        453, 766, 770, 265, 208, 462, 161, 823, 950, 565, 402, 623, 469, 905, 152, 210, 199, 551, 468, 984, 308, 377,
        365, 553, 495, 1, 753, 658, 444, 601, 488, 140, 350, 61, 527, 334, 840, 249, 889, 926, 61, 981, 686, 1000, 110,
        986, 406, 399, 897, 296, 672, 882, 474, 530, 771, 245, 986, 242, 177, 216, 706, 533, 350, 244, 440, 77, 31, 670,
        336, 973, 819, 188, 787, 680, 993, 576, 198, 612, 114, 41, 417, 509, 273, 847, 407, 73, 687, 167, 578, 604, 506,
        995, 255, 251, 296, 746, 86, 307, 365, 434, 433, 584, 290, 836, 725, 141, 527, 612, 153, 730, 509, 471, 986, 20,
        965, 406, 787, 551, 422, 917, 516, 511, 651, 611, 49, 881, 743, 163, 388, 68, 996, 559, 974, 111, 104, 392, 766,
        760, 704, 725, 876, 671, 234, 305, 196, 326, 796, 559, 354, 145, 159, 609, 216, 152, 435, 926, 171, 31, 954,
        997, 47, 591, 218, 72, 123, 309, 286, 833, 586, 173, 515, 59, 52, 246, 387, 202, 10, 146, 597, 188, 788, 681,
        262, 317, 901, 942, 752, 542, 24, 885, 722, 888, 270, 110, 666, 324, 417, 311, 786, 112, 61, 905, 772, 1, 618,
        211, 851, 83, 115, 651, 396, 386, 905, 941, 977, 984, 721, 667, 100, 972, 105, 320, 68, 253, 37, 113, 704, 994,
        259, 595, 360, 39, 270, 340, 312, 563, 723, 555, 219, 803, 51, 424, 349, 773, 143, 843, 264, 843, 271, 8, 855,
        256, 272, 22, 889, 372, 23, 473, 416, 449, 347, 317, 212, 275, 768, 824, 626, 514, 326, 214, 699, 444, 367, 636,
        683, 444, 437, 253, 441, 853, 440, 718, 169, 363, 459, 794, 684, 343, 683, 104, 886, 656, 427, 457, 309, 538,
        581, 875, 113, 854, 934, 930, 627, 969, 394, 776, 690, 462, 836, 633, 847, 816, 151, 754, 421, 269, 787, 205,
        313, 886, 615, 729, 423, 404, 697, 190, 428, 591, 364, 657, 651, 333, 129, 862, 787, 790, 916, 973, 32, 17, 729,
        154, 94, 967, 734, 984, 844, 899, 191, 681, 862, 675, 574, 891, 40, 873, 350, 150, 874, 668, 248, 488, 796, 58,
        836, 444, 771, 566, 405, 406, 352, 41, 279, 672, 384, 517, 917, 495, 606, 708, 874, 411, 742, 711, 6, 150, 423,
        910, 928, 319, 274, 453, 621, 820, 560, 613, 663, 397, 62, 553, 897, 420, 748, 449, 39, 151, 767, 655, 672, 802,
        495, 469, 303, 412, 352, 16, 708, 367, 922, 324, 491, 198, 816, 465, 559, 34, 465, 884, 531, 848, 717, 455, 753,
        935, 36, 356, 101, 996, 243, 715, 19, 495, 72, 106, 181, 299, 621, 234, 876, 270, 39, 184, 476, 322, 3, 720,
        451, 961, 55, 290, 481, 118, 780, 785, 926, 954, 344, 79, 717, 970, 297, 738, 111, 335, 296, 918, 590, 977, 676,
        220, 500, 226, 65, 456, 652, 347, 849, 633, 715, 885, 282, 302, 542, 142, 351, 451, 705, 907, 890, 566, 701,
        111, 262, 308, 920, 605, 163, 381, 299, 28, 455, 263, 755, 82, 246, 305, 365, 223, 240, 35, 904, 67, 75, 592,
        543, 569, 944, 935, 684, 935, 17, 567, 570, 998, 746, 131, 518, 290, 989, 843, 403, 623, 243, 996, 717, 726,
        885, 799, 847, 763, 112, 925, 726, 517, 216, 954, 312, 613, 460, 577, 1000, 563, 109, 269, 490, 712, 973, 201,
        196, 663, 723, 400, 101, 577, 593, 970, 611, 912, 707, 650, 772, 986, 620, 843, 182, 852, 306, 642, 364, 808,
        782, 192, 143, 335, 295, 972, 391, 181, 814, 704, 657, 117, 860, 38, 681, 961, 592, 705, 451, 807, 728, 31, 725,
        990, 416, 385, 503, 949, 66, 456, 106, 387, 894, 643, 790, 554, 212, 586, 146, 169, 339, 856, 73, 472, 114, 976,
        953, 456, 650, 459, 34, 821, 174, 955, 1000, 480, 830, 725, 224, 538, 825, 494, 525, 764, 904, 182, 989, 649,
        194, 370, 650, 727, 896, 13, 92, 839, 884, 708, 950, 445, 764, 434, 967, 22, 563, 95, 661, 127, 234, 274, 923,
        773, 792, 514, 32, 98, 980, 940, 909, 213, 207, 328, 957, 791, 178, 285, 683, 306, 764, 456, 957, 607, 861, 664,
        734, 915, 528, 701, 87, 320, 519, 978, 622, 402, 616, 43, 471, 238, 955, 92, 528, 791, 142, 251, 921, 451, 163,
        2, 912, 506, 277, 626, 605, 29, 440, 120, 800, 406, 620, 197, 620, 953, 178, 656, 455, 916, 100, 821, 258, 990,
        209, 929, 877, 857, 400, 562, 644, 3, 336, 334, 214, 881, 89, 972, 107, 197, 582, 234, 62, 692, 88, 700, 385,
        787, 618, 77, 708, 606, 481, 473, 257, 209, 836, 596, 247, 783, 927, 583, 902, 390, 810, 547, 451, 128, 915, 51,
        858, 883, 618, 391, 621, 14, 332, 598, 951, 352, 425, 497, 435, 455, 554, 408, 796, 567, 913, 197, 433, 287,
        182, 450, 463, 112, 386, 718, 398, 779, 711, 593, 699, 567, 661, 127, 971, 92, 809, 707, 113, 854, 996, 680,
        419, 588, 815, 260, 469, 581, 891, 39, 678, 912, 496, 271, 28, 159, 689, 382, 49, 340, 911, 582, 826, 785, 671,
        456, 885, 279, 553, 305, 17, 580, 551, 112, 979, 400, 329, 367, 362, 773, 587, 57, 718, 529, 565, 586, 747, 597,
        659, 493, 688, 604, 473, 202, 691, 212, 740, 760, 600, 585, 194, 694, 235, 121, 74, 769, 102, 549, 728, 610, 60,
        606, 380, 829, 472, 983, 510, 166, 586, 900, 325, 407, 28, 682, 963, 239, 645, 690, 945, 812, 656, 43, 113, 48,
        825, 127, 485, 363, 245, 832, 257, 623, 301, 387, 106, 197, 531, 667, 688, 703, 712, 975, 60, 227, 915, 647,
        416, 246, 164, 233, 285, 547, 311, 354, 542, 833, 994, 908, 111, 693, 36, 109, 247, 70, 171, 49, 81, 397, 850,
        392, 300, 944, 345, 598, 59, 942, 343, 49, 95, 424, 340, 20, 974, 182, 104, 985, 309, 975, 297, 393, 475, 187,
        303, 722, 210, 710, 870, 868, 116, 87, 799, 726, 230, 127, 918, 799, 321, 821, 17, 945, 939, 126, 588, 680, 245,
        222, 874, 960, 488, 742, 427, 9, 726, 218, 470, 427, 744, 959, 363, 66, 748, 695, 394, 268, 614, 549, 557, 959,
        771, 251, 838, 825, 688, 630, 542, 969, 871, 953, 538, 932, 499, 3, 656, 366, 557, 393, 210, 176, 359, 984, 536,
        439, 853, 330, 139, 479, 308, 534, 831, 242, 250, 673, 89, 220, 36, 420, 915, 241, 827, 439, 347, 383, 724, 115,
        939, 912, 442, 789, 540, 400, 832, 950, 856, 845, 163, 838, 14, 901, 451, 452, 132, 917, 884, 735, 619, 693, 53,
        609, 75, 104, 673, 485, 43, 916, 800, 588, 326, 465, 28, 731, 180, 158, 682, 693, 401, 433, 509, 543, 933, 404,
        398, 885, 110, 443, 60, 829, 219, 498, 177, 197, 196, 733, 481, 549, 682, 452, 111, 711, 424, 356, 560, 693,
        858, 971, 696, 276, 212, 166, 222, 896, 798, 77, 157, 557, 766, 921, 878, 283, 561, 936, 744, 33, 53, 293, 714,
        571, 866, 215, 58, 211, 407, 44, 532, 375, 963, 568, 261, 729, 180, 991, 213, 189, 484, 646, 764, 165, 527, 167,
        776, 77, 333, 216, 947, 212, 254, 544, 299, 786, 795, 265, 455, 720, 73, 782, 305, 183, 150, 713, 122, 477, 128,
        596, 126, 55, 770, 607, 113, 264, 682, 927, 342, 881, 758, 253, 661, 128, 725, 7, 439, 986, 894, 164, 165, 350,
        851, 452, 794, 545, 419, 90, 76, 293, 207, 799, 195, 882, 885, 806, 862, 978, 929, 443, 572, 684, 913, 626, 925,
        624, 509, 649, 761, 327, 924, 611, 665, 1, 944, 446, 930, 715, 927, 910, 276, 171, 252, 998, 164, 337, 251, 413,
        107, 317, 847, 86, 441, 85, 379, 229, 289, 836, 609, 281, 202, 600, 190, 4, 651, 807, 147, 506, 504, 190, 511,
        416, 349, 916, 915, 505, 823, 63, 347, 335, 808, 512, 538, 839, 382, 979, 122, 424, 392, 457, 464, 718, 246,
        549, 286, 273, 295, 526, 911, 209, 495, 10, 394, 52, 708, 326, 453, 55, 654, 978, 899, 460, 407, 818, 327, 453,
        874, 264, 160, 660, 932, 814, 466, 560, 367, 592, 441, 42, 713, 147, 826, 420, 578, 402, 410, 125, 760, 174,
        954, 730, 682, 192, 739, 898, 294, 578, 35, 264, 991 };
    System.out.println(findMaxAverage(nums, k));
  }

  public static double findMaxAverage(int[] nums, int k) {
    int n = nums.length;
    double max = 0.0;

    // first window and biggest window
    int fWindow = 0;
    for (int i = 0; i < k; i++) {
      fWindow += nums[i];
    }

    // we slide, remove one in left and add new one in right.
    max = fWindow;
    for (int i = 0; i < n - k; i++) {
      fWindow += (nums[i + k] - nums[i]);
      max = Math.max(fWindow, max);
    }

    return (max / k);
  }
}
